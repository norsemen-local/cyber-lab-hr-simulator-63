
name: HR Portal - Deploy Application
on:
  workflow_call:
    inputs:
      instance_id:
        description: 'EC2 instance ID'
        type: string
        required: true
      ec2_ip:
        description: 'EC2 IP address'
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy_application:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Build Docker image
        if: ${{ inputs.instance_id != 'unavailable' }}
        run: |
          # Build the Docker image locally in the GitHub Actions runner
          echo "Building Docker image..."
          docker build -t hr-portal-app:latest .
          docker save hr-portal-app:latest > hr-portal-app.tar
          
          # Create unique bucket name and store it as an environment variable for later steps
          BUCKET_NAME="hr-portal-docker-temp-$(date +%s)"
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          
          # Create temporary S3 bucket with unique name 
          echo "Creating temporary S3 bucket: $BUCKET_NAME"
          aws s3 mb s3://$BUCKET_NAME
          
          # Upload Docker image to S3 without setting public ACLs
          echo "Uploading Docker image to S3..."
          aws s3 cp hr-portal-app.tar s3://$BUCKET_NAME/
          
          # List bucket contents to verify upload
          echo "Verifying upload with bucket listing:"
          aws s3 ls s3://$BUCKET_NAME/
          
          # Get the object URL for later use
          S3_URL="s3://$BUCKET_NAME/hr-portal-app.tar"
          echo "S3_URL=$S3_URL" >> $GITHUB_ENV
      
      - name: Verify Docker Installation on EC2
        if: ${{ inputs.instance_id != 'unavailable' }}
        run: |
          INSTANCE_ID=${{ inputs.instance_id }}
          
          echo "Running thorough Docker installation verification..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --parameters "commands=[
              'echo \"===== CHECKING DOCKER INSTALLATION =====\" > /tmp/docker-verification.log',
              'echo \"Command check:\" >> /tmp/docker-verification.log',
              'command -v docker >> /tmp/docker-verification.log 2>&1 || echo \"Docker command not found\" >> /tmp/docker-verification.log',
              'echo \"Package check:\" >> /tmp/docker-verification.log',
              'yum list installed docker >> /tmp/docker-verification.log 2>&1 || echo \"Docker package not found\" >> /tmp/docker-verification.log',
              'echo \"Version check:\" >> /tmp/docker-verification.log',
              'docker --version >> /tmp/docker-verification.log 2>&1 || echo \"Docker version command failed\" >> /tmp/docker-verification.log',
              'echo \"Service check:\" >> /tmp/docker-verification.log',
              'systemctl status docker >> /tmp/docker-verification.log 2>&1 || echo \"Docker service not running\" >> /tmp/docker-verification.log',
              'echo \"===== INSTALLING/REINSTALLING DOCKER IF NEEDED =====\" >> /tmp/docker-verification.log',
              'amazon-linux-extras install -y docker >> /tmp/docker-verification.log 2>&1 || yum install -y docker >> /tmp/docker-verification.log 2>&1',
              'systemctl enable docker >> /tmp/docker-verification.log 2>&1',
              'systemctl restart docker >> /tmp/docker-verification.log 2>&1',
              'echo \"===== FINAL VERIFICATION =====\" >> /tmp/docker-verification.log',
              'docker --version >> /tmp/docker-verification.log 2>&1',
              'systemctl status docker >> /tmp/docker-verification.log 2>&1',
              'echo \"===== VERIFICATION COMPLETE =====\" >> /tmp/docker-verification.log',
              'cat /tmp/docker-verification.log'
            ]" \
            --comment "Thorough Docker verification"
          
          # Wait for the verification to complete
          echo "Waiting for Docker verification to complete..."
          sleep 30
      
      - name: Create and prepare hrApp directory
        if: ${{ inputs.instance_id != 'unavailable' }}
        run: |
          INSTANCE_ID=${{ inputs.instance_id }}
          
          echo "Creating and preparing /tmp/hrApp directory with proper permissions..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --parameters "commands=[
              'echo \"===== PREPARING DIRECTORY =====\" > /tmp/dir-preparation.log',
              'mkdir -p /tmp/hrApp',
              'chmod -R 777 /tmp/hrApp',
              'echo \"Directory created at $(date)\" >> /tmp/dir-preparation.log',
              'echo \"Directory permissions:\" >> /tmp/dir-preparation.log',
              'ls -la /tmp | grep hrApp >> /tmp/dir-preparation.log',
              'echo \"Current user: $(whoami)\" >> /tmp/dir-preparation.log',
              'echo \"AWS CLI version:\" >> /tmp/dir-preparation.log',
              'aws --version >> /tmp/dir-preparation.log 2>&1 || echo \"AWS CLI not installed\" >> /tmp/dir-preparation.log',
              'if ! command -v aws &> /dev/null; then',
              '  echo \"Installing AWS CLI...\" >> /tmp/dir-preparation.log',
              '  yum install -y aws-cli >> /tmp/dir-preparation.log 2>&1',
              'fi',
              'echo \"===== DIRECTORY PREPARATION COMPLETE =====\" >> /tmp/dir-preparation.log',
              'cat /tmp/dir-preparation.log'
            ]" \
            --comment "Prepare hrApp directory"
          
          echo "Waiting for directory preparation to complete..."
          sleep 20
      
      - name: Deploy application
        if: ${{ inputs.instance_id != 'unavailable' }}
        run: |
          INSTANCE_ID=${{ inputs.instance_id }}
          BUCKET_NAME=${{ env.BUCKET_NAME }}
          S3_URL=${{ env.S3_URL }}
          
          if [ "$INSTANCE_ID" == "unavailable" ]; then
            echo "Instance ID not available. Skipping deployment."
            exit 0
          fi
          
          # Deploy using SSM with multiple download methods
          echo "Deploying Docker container to EC2..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --parameters "commands=[
              'echo \"====== STARTING DEPLOYMENT $(date) ======\" > /tmp/deployment.log',
              
              'echo \"Bucket name: $BUCKET_NAME\" >> /tmp/deployment.log',
              'echo \"S3 URL: $S3_URL\" >> /tmp/deployment.log',
              
              'echo \"===== CONFIGURING AWS =====\" >> /tmp/deployment.log',
              'if ! command -v aws &> /dev/null; then',
              '  echo \"Installing AWS CLI...\" >> /tmp/deployment.log',
              '  yum install -y aws-cli >> /tmp/deployment.log 2>&1',
              'fi',
              
              'echo \"Configuring AWS region...\" >> /tmp/deployment.log',
              'aws configure set region us-east-1 >> /tmp/deployment.log 2>&1',
              
              'echo \"Verifying AWS credentials...\" >> /tmp/deployment.log',
              'aws sts get-caller-identity >> /tmp/deployment.log 2>&1 || echo \"Failed to get caller identity\" >> /tmp/deployment.log',
              
              'echo \"===== DOWNLOAD ATTEMPTS =====\" >> /tmp/deployment.log',
              'echo \"Attempt 1: Using instance profile credentials...\" >> /tmp/deployment.log',
              'aws s3 cp s3://'$BUCKET_NAME'/hr-portal-app.tar /tmp/hrApp/ >> /tmp/deployment.log 2>&1',
              
              'if [ ! -f \"/tmp/hrApp/hr-portal-app.tar\" ]; then',
              '  echo \"Attempt 2: Using AWS SDK metadata credentials...\" >> /tmp/deployment.log',
              '  TOKEN=$(curl -s -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")',
              '  ROLE=$(curl -s -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/iam/security-credentials/)',
              '  echo \"Found IAM role: $ROLE\" >> /tmp/deployment.log',
              '  CREDENTIALS=$(curl -s -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE)',
              '  ACCESS_KEY=$(echo $CREDENTIALS | grep -o \"\\\"AccessKeyId\\\" : \\\"[^\\\"]*\" | cut -d\\\"\\\' -f4)',
              '  SECRET_KEY=$(echo $CREDENTIALS | grep -o \"\\\"SecretAccessKey\\\" : \\\"[^\\\"]*\" | cut -d\\\"\\\' -f4)',
              '  SESSION_TOKEN=$(echo $CREDENTIALS | grep -o \"\\\"Token\\\" : \\\"[^\\\"]*\" | cut -d\\\"\\\' -f4)',
              '  aws configure set aws_access_key_id $ACCESS_KEY',
              '  aws configure set aws_secret_access_key $SECRET_KEY',
              '  aws configure set aws_session_token $SESSION_TOKEN',
              '  aws s3 cp s3://'$BUCKET_NAME'/hr-portal-app.tar /tmp/hrApp/ >> /tmp/deployment.log 2>&1',
              'fi',
              
              'echo \"Checking if download was successful...\" >> /tmp/deployment.log',
              'ls -la /tmp/hrApp/ >> /tmp/deployment.log 2>&1',
              
              'if [ ! -f \"/tmp/hrApp/hr-portal-app.tar\" ]; then',
              '  echo \"ERROR: Failed to download Docker image after multiple attempts\" >> /tmp/deployment.log',
              '  echo \"Attempting direct download via curl...\" >> /tmp/deployment.log',
              '  TOKEN=$(curl -s -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")',
              '  ROLE=$(curl -s -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/iam/security-credentials/)',
              '  CREDENTIALS=$(curl -s -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE)',
              '  ACCESS_KEY=$(echo $CREDENTIALS | grep -o \"\\\"AccessKeyId\\\" : \\\"[^\\\"]*\" | cut -d\\\"\\\' -f4)',
              '  SECRET_KEY=$(echo $CREDENTIALS | grep -o \"\\\"SecretAccessKey\\\" : \\\"[^\\\"]*\" | cut -d\\\"\\\' -f4)',
              '  SESSION_TOKEN=$(echo $CREDENTIALS | grep -o \"\\\"Token\\\" : \\\"[^\\\"]*\" | cut -d\\\"\\\' -f4)',
              '  echo \"Using presigned URL as last resort...\" >> /tmp/deployment.log',
              '  TIMESTAMP=$(date +%s)',
              '  PRESIGNED_URL=$(AWS_ACCESS_KEY_ID=$ACCESS_KEY AWS_SECRET_ACCESS_KEY=$SECRET_KEY AWS_SESSION_TOKEN=$SESSION_TOKEN aws s3 presign s3://'$BUCKET_NAME'/hr-portal-app.tar --expires-in 3600)',
              '  echo \"Generated presigned URL\" >> /tmp/deployment.log',
              '  curl -s -o /tmp/hrApp/hr-portal-app.tar \"$PRESIGNED_URL\" >> /tmp/deployment.log 2>&1',
              'fi',
              
              'if [ ! -f \"/tmp/hrApp/hr-portal-app.tar\" ]; then',
              '  echo \"CRITICAL ERROR: All download attempts failed\" >> /tmp/deployment.log',
              '  exit 1',
              'fi',
              
              'echo \"===== DOCKER DEPLOYMENT =====\" >> /tmp/deployment.log',
              'echo \"Loading Docker image...\" >> /tmp/deployment.log',
              'sudo docker load -i /tmp/hrApp/hr-portal-app.tar >> /tmp/deployment.log 2>&1',
              
              'echo \"Removing existing container if any...\" >> /tmp/deployment.log',
              'sudo docker stop hr-portal-container >> /tmp/deployment.log 2>&1 || echo \"No container to stop\" >> /tmp/deployment.log',
              'sudo docker rm hr-portal-container >> /tmp/deployment.log 2>&1 || echo \"No container to remove\" >> /tmp/deployment.log',
              
              'echo \"Running new container...\" >> /tmp/deployment.log',
              'sudo docker run -d --name hr-portal-container -p 80:80 -e API_GATEWAY_ALLOW_ALL=true hr-portal-app:latest >> /tmp/deployment.log 2>&1',
              
              'echo \"Verifying container is running...\" >> /tmp/deployment.log',
              'sudo docker ps >> /tmp/deployment.log 2>&1',
              'sudo docker logs hr-portal-container >> /tmp/deployment.log 2>&1',
              
              'echo \"====== DEPLOYMENT COMPLETED $(date) ======\" >> /tmp/deployment.log',
              'cat /tmp/deployment.log'
            ]" \
            --comment "Deploy HR Portal Docker container"
        
      - name: Verify Deployment
        if: ${{ inputs.instance_id != 'unavailable' }}
        run: |
          INSTANCE_ID=${{ inputs.instance_id }}
          EC2_IP=${{ inputs.ec2_ip }}
          
          echo "Waiting 30 seconds for container to fully initialize..."
          sleep 30
          
          echo "Verifying deployment..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --parameters "commands=[
              'echo \"===== DEPLOYMENT VERIFICATION =====\"',
              'echo \"Container status:\"',
              'sudo docker ps',
              'echo \"Container logs:\"',
              'sudo docker logs hr-portal-container 2>&1 || echo \"No logs available\"',
              'echo \"Web server response:\"',
              'curl -s -o /dev/null -w \"%{http_code}\" http://localhost || echo \"Failed to connect\"',
              'echo \"Files in /tmp/hrApp:\"',
              'ls -la /tmp/hrApp/',
              'echo \"Docker images:\"',
              'sudo docker images',
              'echo \"System disk space:\"',
              'df -h',
              'echo \"===== VERIFICATION COMPLETE =====\"'
            ]" \
            --comment "Verify HR Portal container deployment"
            
      - name: Leave S3 bucket intact
        if: ${{ always() && inputs.instance_id != 'unavailable' }}
        run: |
          BUCKET_NAME=${{ env.BUCKET_NAME }}
          
          if [ -n "$BUCKET_NAME" ]; then
            echo "Keeping S3 bucket: $BUCKET_NAME intact for future use"
            echo "Bucket URL: s3://$BUCKET_NAME"
            
            # List the contents of the bucket
            echo "Contents of the bucket:"
            aws s3 ls "s3://$BUCKET_NAME/"
            
            # Create a presigned URL for the object
            echo "Creating a presigned URL for direct access:"
            PRESIGNED_URL=$(aws s3 presign "s3://$BUCKET_NAME/hr-portal-app.tar" --expires-in 86400)
            echo "Presigned URL (valid for 24 hours): $PRESIGNED_URL"
          else
            echo "Bucket name not available"
          fi
