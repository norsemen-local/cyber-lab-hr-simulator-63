
name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy

jobs:
  check_resources:
    uses: ./.github/workflows/check-resources.yml
  
  deploy:
    needs: check_resources
    if: ${{ needs.check_resources.outputs.terraform_deployed == 'false' && needs.check_resources.outputs.existing_resources == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.terraform_outputs.outputs.EC2_IP }}
      api_url: ${{ steps.terraform_outputs.outputs.API_URL }}
      alb_dns: ${{ steps.terraform_outputs.outputs.ALB_DNS }}
      instance_id: ${{ steps.terraform_outputs.outputs.INSTANCE_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Build Docker image
        run: |
          docker build -t hr-portal-app:latest .
          docker save hr-portal-app:latest > hr-portal-app.tar
        
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="db_username=admin" -var="db_password=password123"
        
      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          cd terraform
          terraform apply -auto-approve -var="db_username=admin" -var="db_password=password123"
          
      - name: Get infrastructure outputs
        if: ${{ github.ref == 'refs/heads/main' }}
        id: terraform_outputs
        run: |
          cd terraform
          EC2_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "unavailable")
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "unavailable")
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "unavailable")
          
          # Get instance ID using a reliable method
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=hr-portal-ec2" --query "Reservations[0].Instances[0].InstanceId" --output text 2>/dev/null || echo "unavailable")
          
          echo "EC2_IP=$EC2_IP" >> $GITHUB_OUTPUT
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT
      
      - name: Wait for instance
        if: ${{ github.ref == 'refs/heads/main' && steps.terraform_outputs.outputs.INSTANCE_ID != 'unavailable' }}
        uses: ./.github/workflows/wait-for-instance.yml
        with:
          instance_id: ${{ steps.terraform_outputs.outputs.INSTANCE_ID }}
      
      - name: Deploy application
        if: ${{ github.ref == 'refs/heads/main' && steps.terraform_outputs.outputs.INSTANCE_ID != 'unavailable' }}
        uses: ./.github/workflows/deploy-application.yml
        with:
          instance_id: ${{ steps.terraform_outputs.outputs.INSTANCE_ID }}
          ec2_ip: ${{ steps.terraform_outputs.outputs.EC2_IP }}
  
  display_urls:
    needs: [check_resources, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Display deployment URLs
        run: |
          if [[ "${{ needs.check_resources.outputs.existing_resources }}" == "true" || "${{ needs.check_resources.outputs.terraform_deployed }}" == "true" ]]; then
            echo "Application is already deployed!"
            echo "EC2 Instance URL: http://${{ needs.check_resources.outputs.ec2_ip || 'unavailable' }}"
            echo "ALB URL: http://${{ needs.check_resources.outputs.alb_dns || 'unavailable' }}"
            echo "API Gateway URL: ${{ needs.check_resources.outputs.api_url || 'unavailable' }}"
          else
            echo "Deployment completed!"
            echo "EC2 Instance URL: http://${{ needs.deploy.outputs.ec2_ip || 'unavailable' }}"
            echo "ALB URL: http://${{ needs.deploy.outputs.alb_dns || 'unavailable' }}"
            echo "API Gateway URL: ${{ needs.deploy.outputs.api_url || 'unavailable' }}"
          fi
