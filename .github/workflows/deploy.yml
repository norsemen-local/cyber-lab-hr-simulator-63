
name: HR Portal AWS Deployment
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
      confirmation:
        description: 'Type "destroy" to confirm deletion of all resources'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if resources exist'
        required: false
        default: 'false'
        type: boolean

jobs:
  # Stage 1: Check Environment and Existing Resources
  check_environment:
    uses: ./.github/workflows/check_environment.yml
    secrets: inherit
  
  # Ask for confirmation if resources already exist
  confirmation_required:
    needs: check_environment
    if: ${{ needs.check_environment.outputs.resources_exist == 'true' && github.event.inputs.force_deploy != 'true' && github.event.inputs.action != 'destroy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Resources already exist
        run: |
          echo "::error::AWS resources for HR Portal already exist!"
          echo "::error::To proceed with deployment and potentially overwrite existing resources, rerun this workflow with 'Force deployment' option enabled."
          echo "::error::Alternatively, use the 'destroy' action first to clean up existing resources."
          exit 1
  
  # Stage 2: Deploy Infrastructure (if environment check passed)
  deploy_infrastructure:
    needs: [check_environment]
    if: ${{ (needs.check_environment.outputs.resources_exist == 'false' || github.event.inputs.force_deploy == 'true') && github.event.inputs.action != 'destroy' }}
    uses: ./.github/workflows/deploy_infrastructure.yml
    with:
      action: ${{ github.event.inputs.action }}
    secrets: inherit
  
  # Stage 3: Wait for Infrastructure to be ready
  wait_for_instance:
    needs: deploy_infrastructure
    if: ${{ github.event.inputs.action != 'destroy' }}
    uses: ./.github/workflows/wait_for_instance.yml
    with:
      instance_id: ${{ needs.deploy_infrastructure.outputs.instance_id }}
    secrets: inherit
  
  # Stage 4: Verify SSM Agent (required for remote management)
  verify_ssm:
    needs: [deploy_infrastructure, wait_for_instance]
    if: ${{ github.event.inputs.action != 'destroy' }}
    uses: ./.github/workflows/verify_ssm_agent.yml
    with:
      instance_id: ${{ needs.deploy_infrastructure.outputs.instance_id }}
    secrets: inherit
  
  # Stage 5: Verify Docker is properly installed
  verify_docker:
    needs: [deploy_infrastructure, wait_for_instance, verify_ssm]
    if: ${{ github.event.inputs.action != 'destroy' }}
    uses: ./.github/workflows/verify_docker.yml
    with:
      instance_id: ${{ needs.deploy_infrastructure.outputs.instance_id }}
    secrets: inherit
  
  # Stage 6: Deploy the Docker Container with the Application
  deploy_application:
    needs: [deploy_infrastructure, wait_for_instance, verify_ssm, verify_docker]
    if: ${{ github.event.inputs.action != 'destroy' }}
    uses: ./.github/workflows/deploy_application.yml
    with:
      instance_id: ${{ needs.deploy_infrastructure.outputs.instance_id }}
      ec2_ip: ${{ needs.deploy_infrastructure.outputs.ec2_ip }}
    secrets: inherit
  
  # Stage 7: Display URLs for accessing the application
  display_urls:
    needs: [deploy_infrastructure, deploy_application]
    if: ${{ github.event.inputs.action != 'destroy' && always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Display deployment URLs
        run: |
          echo "============= DEPLOYMENT INFORMATION ============="
          echo "HR Portal has been deployed successfully!"
          echo ""
          echo "Application Load Balancer (ALB) URL:"
          echo "http://${{ needs.deploy_infrastructure.outputs.alb_dns }}"
          echo ""
          echo "API Gateway URL:"
          echo "${{ needs.deploy_infrastructure.outputs.api_url }}"
          echo ""
          echo "EC2 Instance Direct URL (for debugging):"
          echo "http://${{ needs.deploy_infrastructure.outputs.ec2_ip }}"
          echo "=================================================="
  
  # Handle resource destruction if requested
  destroy:
    needs: check_environment
    if: ${{ github.event.inputs.action == 'destroy' }}
    uses: ./.github/workflows/destroy_resources.yml
    with:
      confirmation: ${{ github.event.inputs.confirmation }}
    secrets: inherit
