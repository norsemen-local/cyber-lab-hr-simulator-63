
name: HR Portal - Deploy Infrastructure
on:
  workflow_call:
    inputs:
      action:
        description: 'Action to perform'
        type: string
        required: true
        default: 'deploy'
    outputs:
      ec2_ip:
        description: "EC2 instance public IP"
        value: ${{ jobs.deploy_infra.outputs.ec2_ip }}
      api_url:
        description: "API Gateway URL"
        value: ${{ jobs.deploy_infra.outputs.api_url }}
      alb_dns:
        description: "ALB DNS name"
        value: ${{ jobs.deploy_infra.outputs.alb_dns }}
      instance_id:
        description: "EC2 instance ID"
        value: ${{ jobs.deploy_infra.outputs.instance_id }}
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.terraform_outputs.outputs.EC2_IP }}
      api_url: ${{ steps.terraform_outputs.outputs.API_URL }}
      alb_dns: ${{ steps.terraform_outputs.outputs.ALB_DNS }}
      instance_id: ${{ steps.terraform_outputs.outputs.INSTANCE_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="db_username=admin" -var="db_password=password123"
        
      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          cd terraform
          terraform apply -auto-approve -var="db_username=admin" -var="db_password=password123"
          
      - name: Get infrastructure outputs
        if: ${{ github.ref == 'refs/heads/main' }}
        id: terraform_outputs
        run: |
          cd terraform
          
          # Extract values directly from raw output and clean them
          EC2_OUTPUT=$(terraform output -raw ec2_public_ip || echo "unavailable")
          EC2_IP=$(echo "$EC2_OUTPUT" | grep -o '^[0-9.]*' || echo "unavailable")
          
          ALB_OUTPUT=$(terraform output -raw alb_dns_name || echo "unavailable")
          ALB_DNS=$(echo "$ALB_OUTPUT" | grep -o '^[a-zA-Z0-9.-]*' || echo "unavailable")
          
          API_OUTPUT=$(terraform output -raw api_gateway_url || echo "unavailable")
          API_URL=$(echo "$API_OUTPUT" | grep -o '^https://[a-zA-Z0-9./-]*' || echo "unavailable")
          
          INSTANCE_OUTPUT=$(terraform output -raw instance_id || echo "unavailable")
          INSTANCE_ID=$(echo "$INSTANCE_OUTPUT" | grep -o '^i-[a-z0-9]*' || echo "unavailable")
          
          # If extraction failed, attempt to get instance ID from AWS CLI
          if [ "$INSTANCE_ID" == "unavailable" ]; then
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=hr-portal-ec2" --query "Reservations[0].Instances[0].InstanceId" --output text || echo "unavailable")
            INSTANCE_ID=$(echo "$INSTANCE_ID" | grep -o '^i-[a-z0-9]*' || echo "unavailable")
          fi
          
          echo "EC2_IP=${EC2_IP}" >> $GITHUB_OUTPUT
          echo "API_URL=${API_URL}" >> $GITHUB_OUTPUT
          echo "ALB_DNS=${ALB_DNS}" >> $GITHUB_OUTPUT
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          
          echo "EC2 IP: ${EC2_IP}"
          echo "ALB DNS: ${ALB_DNS}"
          echo "API URL: ${API_URL}"
          echo "Instance ID: ${INSTANCE_ID}"
