
name: HR Portal - Verify SSM Agent
on:
  workflow_call:
    inputs:
      instance_id:
        description: 'EC2 instance ID'
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  verify_ssm:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Verify SSM agent is working
        if: ${{ inputs.instance_id != 'unavailable' }}
        run: |
          INSTANCE_ID=${{ inputs.instance_id }}
          
          if [ "$INSTANCE_ID" == "unavailable" ]; then
            echo "Instance ID not available. Skipping SSM verification."
            exit 0
          fi
          
          echo "Verifying SSM agent status on instance $INSTANCE_ID..."
          
          # Check if instance is already registered with SSM
          SSM_ONLINE=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query "InstanceInformationList[0].PingStatus" --output text 2>/dev/null || echo "ConnectionLost")
          
          echo "SSM Agent status: $SSM_ONLINE"
          
          # If SSM is working, we're done
          if [ "$SSM_ONLINE" == "Online" ]; then
            echo "SSM Agent is online and working properly."
            exit 0
          fi
          
          # Otherwise try to restart the SSM agent using EC2 Instance Connect
          echo "SSM Agent is not online. Attempting recovery..."
          
          # First try: Use AWS EC2 Instance Connect to run commands directly on the instance
          echo "Attempting to connect to instance using EC2 Instance Connect..."
          
          # Check if instance is in a running state
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Instance is not in 'running' state (current state: $INSTANCE_STATE). Cannot attempt recovery."
            echo "WARNING: Subsequent deployment steps may fail without SSM connectivity."
            exit 0
          fi
          
          # Try to use EC2 Instance Connect to run the recovery commands
          # We'll create a temporary SSH key for this purpose
          echo "Generating temporary SSH key for EC2 Instance Connect..."
          ssh-keygen -t rsa -f /tmp/temp_key -N "" -q
          
          # Get the public key
          PUB_KEY=$(cat /tmp/temp_key.pub)
          
          # Get the instance's availability zone
          AZ=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Placement.AvailabilityZone" --output text)
          
          # Try to push the public key to the instance
          echo "Pushing SSH key to instance..."
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id $INSTANCE_ID \
            --availability-zone $AZ \
            --instance-os-user ec2-user \
            --ssh-public-key "$PUB_KEY"
          
          # Sleep for a moment to allow the key to propagate
          sleep 5
          
          # Get the instance's public IP address
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          
          echo "Attempting to connect to $PUBLIC_IP via SSH to restart SSM agent..."
          
          # Use SSH with StrictHostKeyChecking=no to execute commands
          ssh -i /tmp/temp_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@$PUBLIC_IP << 'EOF' || echo "SSH connection failed, but continuing..."
          sudo amazon-linux-extras install -y amazon-ssm-agent
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl restart amazon-ssm-agent
          echo "SSM agent restarted at $(date)"
          EOF
          
          # Wait for the recovery to take effect
          echo "Waiting for SSM agent recovery (60 seconds)..."
          sleep 60
          
          # Check again if recovery was successful
          SSM_ONLINE_AFTER=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query "InstanceInformationList[0].PingStatus" --output text 2>/dev/null || echo "ConnectionLost")
          
          echo "SSM Agent status after recovery attempt: $SSM_ONLINE_AFTER"
          
          if [ "$SSM_ONLINE_AFTER" == "Online" ]; then
            echo "SSM Agent recovery successful."
            exit 0
          fi
          
          # If SSH method failed, try a second approach using AWS Session Manager if available
          echo "First recovery attempt failed. Trying alternative approach..."
          
          # Attempt to send a command to the instance using AWS Systems Manager Send Command
          # This may work if the SSM agent is installed but just not reporting correctly
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Attempt to restart SSM Agent" \
            --parameters commands='["amazon-linux-extras install -y amazon-ssm-agent","systemctl enable amazon-ssm-agent","systemctl restart amazon-ssm-agent","echo SSM agent restarted"]' \
            --output text \
            --query "Command.CommandId" 2>/dev/null || echo "failed")
          
          if [ "$COMMAND_ID" != "failed" ]; then
            echo "Send-Command succeeded, waiting for command completion..."
            sleep 30
            
            # Check command status
            aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$INSTANCE_ID" || echo "Command status check failed, continuing..."
            
            # Check SSM status again
            SSM_ONLINE_FINAL=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" --query "InstanceInformationList[0].PingStatus" --output text 2>/dev/null || echo "ConnectionLost")
            echo "SSM Agent status after second recovery attempt: $SSM_ONLINE_FINAL"
            
            if [ "$SSM_ONLINE_FINAL" == "Online" ]; then
              echo "SSM Agent recovery successful on second attempt."
              exit 0
            fi
          else
            echo "Send-Command failed, SSM service might not be available at all on this instance."
          fi
          
          echo "SSM Agent recovery failed after multiple attempts, but continuing with workflow."
          echo "WARNING: Subsequent deployment steps may fail without SSM connectivity."
